#!/bin/perl
use JSON;
use Data::Dumper;
use strict;

#TODO: introduce proper loggin
#
sub workspaces
{
    my $cmd=`i3-msg -t get_workspaces`;
    my @ws = @{JSON->new->utf8->decode($cmd)};
    return @ws;
}

sub statusbars
{
    my $cmd = `i3-msg -t get_bar_config`;
    my @bs = @{JSON->new->utf8->decode($cmd)};

    my @bars;
    for my $barName (@bs) {
        $cmd = `i3-msg -t get_bar_config $barName`;
        my @bar = JSON->new->utf8->decode($cmd);

        push @bars, @bar;
    }
    return @bars;
}

package WorkSpaces;

sub new
{
    my $class = shift;
    my $this = {
        wss => [::workspaces()],
        sbs => [::statusbars()],
    };
    bless $this, $class;
    return $this;
}

sub wsByName
{
    my ($this, $name) = @_;
    for my $ws  (@{$this->{wss}}) {
        #print"\"$ws->{name}\" - \"$name\"\n";
        if ( "$ws->{name}" eq "$name") {
            return $ws;
        }
    }
}

sub wsFocused
{
    my ($this) = @_;
    for my $ws  (@{$this->{wss}}) {
        next if $ws->{focused} != JSON::PP::true;
        return $ws;
    }
}

sub sbByOutput
{
    my ($this, $output) = @_;
    for my $sb ( @{$this->{sbs}}) {
        for my $sb_out ( @{$sb->{outputs}}) {
            if ( "$output" eq "$sb_out") {
                return $sb;
            }
        }
    }
}

sub cmd
{
    our $cmds;

    my $this = shift;
    my $cmd = shift;

    if (defined &{$cmds->{$cmd}}) {
        &{$cmds->{$cmd}}($this, @_);
    } else {
        print "Unknown cmd (\"$cmd\")";
    }
}

our $cmds = {
"toWS" => sub {
    my ($this, $name, @args) = @_;

    $name or die "Workspace is not defied";
    @_ or die "Comand is not defiend";

    #print "\"$name\"\n";
    #my $extra = "";
    #if ("$args[0]" eq "--tabbed") {
    #    shift @args;
    #    $extra = ", layout tabbed";
    #}
    my $run = 'exec "'.join(' ', @args).'"' if not $this->wsByName($name);
    exec "i3-msg workspace $name, $run >/dev/null" or die "Cant execute i3-msg";
},

"tgStBar" => sub {
    my ($this) = @_;
    my $ws = $this->wsFocused();
    my $st = $this->sbByOutput($ws->{output});
    exec "i3-msg bar mode toggle $st->{id} >/dev/null" or die "Can't execute i3-msg";
},

};

package i3tools;
sub main 
{
    my $wss = new WorkSpaces;
    return $wss->cmd(@_);
}

exit main @ARGV;

